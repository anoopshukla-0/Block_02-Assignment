=========================================
🚀 JavaScript Deep Clone Notes
=========================================

🧩 SECTION 1: 📌 QUESTION
-----------------------------------------

📖 Now it's time to do some reading (Doc Link)  
Really hoping you read the article — it's very imperative for the following problem.

---

📝 PROBLEM STATEMENT:

Write a function `deepClone(obj)` that creates a deep copy of a given object 
using `JSON.stringify()` and `JSON.parse()`.

The function should ensure that modifying the cloned object does NOT affect 
the original object.

---

💡 Example Input:

{
  name: "Alice",
  hobbies: ["reading", "traveling"]
}

---

💡 Example Output (After modifying the clone):

Original: { name: "Alice", hobbies: ["reading", "traveling"] }

Clone:    { name: "Alice", hobbies: ["reading", "traveling", "coding"] }

---

=========================================
📖 SECTION 2: SELF LEARNING
=========================================

🔍 WHAT IS DEEP CLONING?

Deep cloning means creating a COMPLETE and INDEPENDENT copy of an object,
including all its nested objects and arrays.

📦 The goal is: 
   ➤ Modify the copy ✅
   ➤ Original stays safe & untouched ✅

----------------------------------------------------
📌 WHY DO WE NEED IT?

Because in JavaScript, objects are assigned by reference.
If you copy an object directly, both variables will point to the same memory!

Example:
-------------
let original = { name: "Anoop" };
let copy = original;

copy.name = "Shyam";

console.log(original.name); // 🔴 Outputs: "Shyam" — Oops! Reference shared.

----------------------------------------------------
✅ SOLUTION: Use JSON.stringify() + JSON.parse()

🛠 Method:
-------------
function deepClone(obj) {
  return JSON.parse(JSON.stringify(obj));
}

💡 This creates a completely new object with no link to the original.

----------------------------------------------------
⚠️ LIMITATIONS OF THIS METHOD:

This approach works well with plain JavaScript objects, but it does NOT support:
   ❌ Date objects
   ❌ Functions
   ❌ undefined values
   ❌ RegExp, Map, Set
   ❌ Circular references

📌 Example of failure:
   JSON.stringify({ name: "Anoop", createdAt: new Date() });
   // Date will be converted to a string — ❗ not preserved

----------------------------------------------------
🧪 EXAMPLE: Using deepClone()

const original = {
  name: "Alice",
  hobbies: ["reading", "traveling"]
};

const clone = deepClone(original);
clone.hobbies.push("coding");

console.log("Original:", original);
// Output: { name: 'Alice', hobbies: ['reading', 'traveling'] }

console.log("Clone:", clone);
// Output: { name: 'Alice', hobbies: ['reading', 'traveling', 'coding'] }

🎯 Mission accomplished: Clone is safe to mutate! 💥

----------------------------------------------------
💎 BEST PRACTICE:

Use this method when:
   ✅ Data is JSON-compatible
   ✅ Performance is not a major concern
   ✅ Simplicity and speed matter

For complex structures or deep types → Use libraries like:
   🔸 Lodash → _.cloneDeep(obj)
   🔸 StructuredClone API (modern browsers)
   🔸 Manual recursive cloning

----------------------------------------------------